var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Animated, InteractionManager, StyleSheet, TouchableOpacity, View, } from 'react-native';
import React, { useEffect, useState } from 'react';
var styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        overflow: 'hidden',
    },
    underline: {
        width: '100%',
        height: 1,
        position: 'absolute',
        top: 0,
    },
    content: {
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'flex-start',
    },
    contentChild: {
        padding: 12,
    },
    contentView: {
        flexDirection: 'row',
        alignItems: 'center',
        height: '100%',
    },
    contentTxt: {
        color: 'black',
        marginLeft: 8,
        fontSize: 12,
    },
    contentFooter: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center',
        height: 48,
        paddingHorizontal: 12,
    },
});
var AnimationType;
(function (AnimationType) {
    AnimationType["showContent"] = "showContent";
    AnimationType["hideContent"] = "hideContent";
    AnimationType["null"] = "null";
})(AnimationType || (AnimationType = {}));
var lastContentVisibleState;
function Accordion(props) {
    var _a = useState(null), animatedValue = _a[0], setAnimatedValue = _a[1];
    var _b = useState({ header: false, content: false }), isMounted = _b[0], setMounted = _b[1];
    var _c = useState({
        isContentVisible: !!props.contentVisibleOnLoad,
        currentAnimation: AnimationType.null,
    }), contentVisibleState = _c[0], setContentVisibleState = _c[1];
    var isContentVisible = contentVisibleState.isContentVisible, currentAnimation = contentVisibleState.currentAnimation;
    var _d = useState(0), headerHeight = _d[0], setHeaderHeight = _d[1];
    var _e = useState(0), contentHeight = _e[0], setContentHeight = _e[1];
    var runAnimation = function () {
        var targetAnimation = currentAnimation === AnimationType.null
            ? (isContentVisible
                ? AnimationType.hideContent
                : AnimationType.showContent)
            : (currentAnimation === AnimationType.hideContent
                ? AnimationType.showContent
                : AnimationType.hideContent);
        lastContentVisibleState = {
            isContentVisible: isContentVisible,
            currentAnimation: targetAnimation,
        };
        setContentVisibleState(lastContentVisibleState);
    };
    useEffect(function () {
        if (currentAnimation === AnimationType.null)
            return;
        var isCollapsing = currentAnimation === AnimationType.hideContent;
        var initialValue = isCollapsing
            ? headerHeight + contentHeight
            : headerHeight;
        var finalValue = isCollapsing
            ? headerHeight
            : contentHeight + headerHeight;
        if (animatedValue) {
            animatedValue.setValue(initialValue);
            Animated.spring(animatedValue, {
                toValue: finalValue,
            }).start(function () {
                if (lastContentVisibleState === contentVisibleState) {
                    setContentVisibleState({
                        isContentVisible: !isCollapsing,
                        currentAnimation: AnimationType.null,
                    });
                }
            });
        }
    }, [contentVisibleState]);
    var onAnimLayout = function (evt) {
        if (isMounted.header && currentAnimation !== AnimationType.null)
            return;
        var headerHeight = evt.nativeEvent.layout.height;
        if (!isMounted.header && !props.contentVisibleOnLoad) {
            setAnimatedValue(new Animated.Value(headerHeight));
            setMounted(__assign(__assign({}, isMounted), { header: true }));
            setHeaderHeight(headerHeight);
            return;
        }
        else if (!isMounted.header) {
            InteractionManager.runAfterInteractions(function () {
                setAnimatedValue(new Animated.Value(headerHeight + contentHeight));
            });
        }
        setMounted(__assign(__assign({}, isMounted), { header: true }));
        setHeaderHeight(headerHeight);
    };
    var onLayout = function (evt) {
        if (isMounted.content && (!isContentVisible || currentAnimation !== AnimationType.null))
            return;
        var contentHeight = evt.nativeEvent.layout.height;
        setContentHeight(contentHeight);
        setMounted(__assign(__assign({}, isMounted), { content: true }));
    };
    return (<Animated.View style={[
        styles.container,
        {
            height: animatedValue,
            backgroundColor: props.backgroundColor,
        },
        props.style,
    ]}>
      <TouchableOpacity activeOpacity={0.5} onPress={runAnimation}>
        <View onLayout={onAnimLayout}>
          {props.header}
          {isContentVisible ? props.visibleElement : props.invisibleElement}
        </View>
      </TouchableOpacity>
      <View style={styles.content} onLayout={onLayout}>
        <View style={[styles.contentChild]}>{props.children}</View>
      </View>
    </Animated.View>);
}
Accordion.defaultProps = {
    contentVisible: false,
    backgroundColor: 'transparent',
    titleBackground: 'transparent',
    contentBackground: 'transparent',
    underlineColor: '#d3d3d3',
    visibleElement: null,
    invisibleElement: null,
};
export default Accordion;
